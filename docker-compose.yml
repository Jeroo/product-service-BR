version: '3.9'

services:

  quarkus-product-service:
    image: quay.io/quarkus/ubi-quarkus-native-image:latest
    container_name: quarkus-product-service
    build:
      context: .
      dockerfile: src/main/docker/Dockerfile.jvm
    ports:
      - "8080:8080"
    depends_on:
      - db
      - broker
    environment:
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://db:5432/product_db
      - QUARKUS_DATASOURCE_USERNAME=admin
      - QUARKUS_DATASOURCE_PASSWORD=admin123
      - QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION=update
      - QUARKUS_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - QUARKUS_HTTP_PORT=8080 # Corrected port to match exposed port
      - MP_MESSAGING_OUTGOING_PRODUCT_EVENTS_TOPIC=product-events
      - MP_MESSAGING_OUTGOING_PRODUCT_EVENTS_CONNECTOR=smallrye-kafka
      - MP_MESSAGING_OUTGOING_PRODUCT_EVENTS_VALUE_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer

  quarkus-inventory-service:
    image: quay.io/quarkus/ubi-quarkus-native-image:latest
    container_name: quarkus-inventory-service
    build:
      context: ./inventory-service
      dockerfile: src/main/docker/Dockerfile.jvm
    ports:
      - "8181:8181"
    depends_on:
      - db
      - broker
    environment:
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://db:5432/inventory_db
      - QUARKUS_DATASOURCE_USERNAME=admin
      - QUARKUS_DATASOURCE_PASSWORD=admin123
      - QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION=update
      - QUARKUS_KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - QUARKUS_HTTP_PORT=8181
      - MP_MESSAGING_INCOMING_PRODUCT_EVENTS_TOPIC=product-events
      - MP_MESSAGING_INCOMING_PRODUCT_EVENTS_CONNECTOR=smallrye-kafka
      - MP_MESSAGING_INCOMING_PRODUCT_EVENTS_VALUE_DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer


  db:
    image: postgres:15
    container_name: postgres-db-br
    environment:
      POSTGRES_DB: product_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.4.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.4.0-6.1.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.1.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
#      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
#      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
#      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB_URL: jdbc:postgresql://keycloak-db-container/keycloak-db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: admin123
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_HTTP_ENABLED: true
      #KC_HOSTNAME_STRICT_HTTPS: false
      KEYCLOAK_SSL_REQUIRED: none
      #KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8280  # âœ… Corrected port setting
      KC_HOSTNAME=localhost:8280:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: keycloak-db
      DB_USER: postgres
      DB_PASSWORD: admin123
      KC_DB: postgres
      #KC_DB_URL: jdbc:postgresql://postgres/keycloak-db:5433
    ports:
      - "8280:8080"
      - "9000:9000"
    command: start
    restart: unless-stopped
    depends_on:
      - broker
      - keycloak-db-container
    volumes:
      - keycloak_data:/opt/keycloak/data

  keycloak-db-container:
    image: postgres:15
    container_name: keycloak-db-container
    environment:
      POSTGRES_DB: keycloak-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin123
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.4.1
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

volumes:
  postgres-data:
  keycloak_data:
  keycloak_db_data: